@page "/item/{itemId:int}"

@using System.Net
@using WebApp.Features.Cart
@using WebApp.Features.Catalog.Entities

@inject CatalogService CatalogService
@inject CartState CartState
@inject NavigationManager Nav



@if(item is not null)
{
    
<PageTitle>@item.Name | Nordics</PageTitle>
<section class="bg-white py-8">
    <div class="container mx-auto flex flex-row -mx-4">

        <div class="flex-1 px-4">

            <div class="h-[460px] rounded-lg bg-gray-100 mb-4">
                <img class="w-full h-full object-cover" src="@item.PictureFilename" alt="@item.Name" />
            </div>

            
        </div>

        <div class="relative flex-1 px-4">
            <h2 class="text-2xl font-bold text-gray-800 mb-2">@item.Name</h2>

            <p class="text-gray-600 text-sm mb-4">@item.Description</p>

            <div class="flex mb-4">
                <div class="mr-4">
                    <span class="font-bold text-gray-700">Price:</span>
                    <span class="text-gray-600">&euro; @item.Price.ToString("0.00")</span>
                </div>
                 <div>
                    <span class="font-bold text-gray-700">In stock:</span>
                    <span class="text-gray-600">In Stock</span>
                </div>
            </div>

            <div class="mb-4">
                <span class="font-bold text-gray-700 dark:text-gray-300">Select Color:</span>
                <div class="flex items-center mt-2">
                    <button class="w-6 h-6 rounded-full bg-gray-800 dark:bg-gray-200 mr-2"></button>
                    <button class="w-6 h-6 rounded-full bg-red-500 dark:bg-red-700 mr-2"></button>
                    <button class="w-6 h-6 rounded-full bg-blue-500 dark:bg-blue-700 mr-2"></button>
                    <button class="w-6 h-6 rounded-full bg-yellow-500 dark:bg-yellow-700 mr-2"></button>
                </div>
            </div>

            <div class="mb-8">
                <span class="font-bold text-gray-700 dark:text-gray-300">Select Size:</span>
                <div class="flex items-center mt-2">
                    <button class="bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-white py-2 px-4 rounded-full font-bold mr-2 hover:bg-gray-400 dark:hover:bg-gray-600">S</button>
                    <button class="bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-white py-2 px-4 rounded-full font-bold mr-2 hover:bg-gray-400 dark:hover:bg-gray-600">M</button>
                    <button class="bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-white py-2 px-4 rounded-full font-bold mr-2 hover:bg-gray-400 dark:hover:bg-gray-600">L</button>
                    <button class="bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-white py-2 px-4 rounded-full font-bold mr-2 hover:bg-gray-400 dark:hover:bg-gray-600">XL</button>
                    <button class="bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-white py-2 px-4 rounded-full font-bold mr-2 hover:bg-gray-400 dark:hover:bg-gray-600">XXL</button>
                </div>
            </div>

            <div class="absolute bottom-0 w-full flex -mx-2 mb-4">
                <div class="w-1/2 px-2">
                    <button class="w-full bg-gray-900 dark:bg-gray-600 text-white py-2 px-4 rounded-full font-bold hover:bg-gray-800 dark:hover:bg-gray-700">Add to Cart</button>
                </div>
                <div class="w-1/2 px-2">
                    <button class="w-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white py-2 px-4 rounded-full font-bold hover:bg-gray-300 dark:hover:bg-gray-600">Add to Wishlist</button>
                </div>
            </div>
        </div>

    </div>
</section>
} 
else if(notFound)
{
    <div class="item-details">
        <p>Sorry, we couldn't find any such product.</p>
    </div>
}

@code {
    private CatalogItem? item;
    private int numInCart;

    private bool isLoggedin;
    private bool notFound;

    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoggedin = HttpContext?.User.Identity?.IsAuthenticated == true;
            var test = await CatalogService.GetCatalogItem(ItemId);

            item = await CatalogService.GetCatalogItem(ItemId);
            // new CatalogItem()
            // {
            //     Id = ItemId,
            //     Name = "Test",
            //     Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed sed ante justo. Integer euismod libero id mauris malesuada tincidunt.",
            //         PictureUri = "https://cdn.pixabay.com/photo/2020/05/22/17/53/mockup-5206355_960_720.jpg",
            //     Price = 1,
            // };

            await UpdateNumInCartAsync();

        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        {
            HttpContext!.Response.StatusCode = 404;
            notFound = true;
        }
    }

    private async Task UpdateNumInCartAsync()
    {
        var items = await CartState.GetCartItems();
        numInCart = items.FirstOrDefault(row => row.ProductId == ItemId)?.Quantity ?? 0;
    }
}
